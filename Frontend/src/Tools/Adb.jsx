import React, { useEffect, useState } from "react";
import { useNavigate } from 'react-router-dom';
import "./Adb.css"; 

function Adb() {
  const navigate = useNavigate();
  const [output, setOutput] = useState("");
  const [loading, setLoading] = useState(false);
  const [commands, setCommands] = useState([]);
  const [devices, setDevices] = useState([]);
  const [selectedDevice, setSelectedDevice] = useState("");
  const [bluetooth, setBluetooth] = useState(false);
  const [wifi, setWifi] = useState(false);
  const [packages, setPackages] = useState([]); // State for holding APK packages
  const [apk, setApk] = useState([]);

  console.log("Bluetooth Status:", bluetooth);
  console.log("Wi-Fi Status:", wifi);
  console.log("Packages:", packages);
  console.log("All apk : ", apk)

  const handleClick = async () => {
    setLoading(true);
    try {
      const response = await fetch("http://localhost:4003/run-adb-command");
      const data = await response.json();
      if (data.devices && Array.isArray(data.devices)) {
        setDevices(data.devices);
      } else {
        setDevices([]); // Set devices to empty array if data.devices is not valid
      }
      setCommands(data.commands);
    } catch (error) {
      console.error("Error:", error);
    }
    setLoading(false);
  };

  const handleToolHistory = async () => {
    navigate('/retrieve');
  };

  const handleDeviceSelect = (device) => {
    setSelectedDevice(device);
  };

  const handleCommandClick = async (command) => {
    setLoading(true);
    try {
      const response = await fetch(
        `http://localhost:4003/execute-adb-command/${selectedDevice}/${command}`
      );
      const data = await response.json();
      setOutput(data.output);

      if (command === "shell dumpsys bluetooth_manager") {
        const words = data.output.replace(/\n/g, ' ').trim().split(' ');
        if (words.length >= 6 && words[5] === "true") {
          setBluetooth(true);
        }
      }

      if (command === "shell dumpsys wifi") {
        const words = data.output.replace(/\n/g, ' ').trim().split(' ');
        if (words.length >= 3 && words[2] === "enabled") {
          setWifi(true);
        }
      }

      if (command === "shell pm list packages") {
        const packagesArray = data.output.split('\n');
        const cleanedPackagesArray = packagesArray.map(pkg => pkg.replace('package:', ''));
        setPackages(cleanedPackagesArray); // Update the packages state here
      }
      
    } catch (error) {
      console.error("Error:", error);
    }
    setLoading(false);
  };

  // This useEffect handles running commands based on the selected device
  useEffect(() => {
    if (selectedDevice === "") return;

    const fetchData = async () => {
      await handleCommandClick("shell dumpsys bluetooth_manager");
      await handleCommandClick("shell dumpsys wifi");
      await handleCommandClick("shell pm list packages");
    };

    fetchData();
  }, [selectedDevice]);

  // This useEffect runs the `getAllAPks()` function when `packages` array is updated
  useEffect(() => {
    getAllAPks();
  }, [packages]);

  const getAllAPks = () => {
    console.log("Inside getAllAPks");
    if (packages.length > 0) {
      const arr = []
      packages.forEach(async (pkg) => {
        if (pkg !== "") {
          try {
            const response = await fetch(`http://localhost:4003/getapks/${pkg}`);
            const data = await response.json();
            const apkPaths = data.output.trim().split('\n').map(path => path.trim());
            apkPaths.map(path => {
              arr.push(path)
            })
          } catch (error) {
            console.error("Error fetching APK paths:", error);
          }
        }
      });
      setApk(arr)
    } else {
      console.log("No packages available yet");
    }
  };
  

  console.log("Devices:", devices); // Add this line to check devices array

  const handleADBToolClick = () => {
    navigate('/adbrun', { state: { bluetooth, wifi } });
  };

  const handleADBToolClick1 = () => {
    console.log("Clicked")
  }

  return (
    <div className="container1" style={{ backgroundColor: "#f0f0f0", border: "0px" }}>
      <div className="d-grid gap-2 d-md-block">
        <button type="button" className="btn btn-outline-success" onClick={handleClick}>
          View Connected Devices
        </button>
      </div>
      <div className="d-grid gap-2 d-md-block">
        <button type="button" className="btn btn-outline-success mt-2" onClick={handleToolHistory}>
          Show Test History
        </button>
      </div>
      {loading && <p className="loading">Loading...</p>}
      <div className="devices-container">
        {devices.length > 0 &&
          devices.map((device, index) => (
            <button
              key={index}
              onClick={() => handleDeviceSelect(device)}
              className={selectedDevice === device ? "selected" : ""}
            >
              {device}
            </button>
          ))}
      </div>

      <div className="button-container">
        {commands.map((command, index) => (
          <button key={index} onClick={() => handleCommandClick(command)}>
            {getCommandLabel(command)}
          </button>
        ))}
      </div>

      <div style={{ display: "flex", gap: "10px", color: "white", alignContent: "center", justifyContent: "center"}}>
        {selectedDevice && (
          <button
            className="btn btn-danger btn-sm"
            onClick={handleADBToolClick}
            style={{ color: "white" }}
          >
            Run tools based on ADB Analysis
          </button>
        )}
        {selectedDevice && (
          <button
            className="btn btn-danger btn-sm"
            onClick={handleADBToolClick1}
            style={{ color: "white" }}
          >
            Select APK and run Tools
          </button>
        )}
      </div>

      <div className="output-container">
        {output && (
          <div className="output">
            <h3>ADB Command Output:</h3>
            <pre>{output}</pre>
          </div>
        )}
      </div>
    </div>
  );
}

function getCommandLabel(command) {
  switch (command) {
    case "shell":
      return "Shell";
    case "install <path_to_apk>":
      return "Install APK";
    case "uninstall <package_name>":
      return "Uninstall Package";
    case "push <local_path> <remote_path>":
      return "Push File";
    case "pull <remote_path> <local_path>":
      return "Pull File";
    case "reboot":
      return "Reboot";
    case "shell dumpsys battery":
      return "Battery";
    case "shell dumpsys bluetooth_manager":
      return "Bluetooth";
    case "shell dumpsys wifi":
      return "Wi-Fi";
    case "shell pm list packages":
      return "Installed Packages";
    case "shell wm size":
      return "Window Size";
    case "shell getprop":
      return "Properties of Device";
    case "shell df":
      return "Device's Storage Partitions";
    case "shell top":
      return "Real-time CPU and Memory Usage";
    case "shell ip address show":
      return "Show IP Address";
    case "shell dumpsys sensorservice":
      return "Sensors Available";
    case "shell dumpsys connectivity":
      return "Connectivity";
    case "shell dumpsys thermalservice":
      return "Thermal Service";
    case "shell dumpsys media.camera":
      return "Camera";
    default:
      return command;
  }
}

export default Adb;

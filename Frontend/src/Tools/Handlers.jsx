import React, { useEffect, useState } from "react";
import axios from "axios";
import AndrobugsResults from "./AndrobugsResults";

const Handlers = ({ 
  tool, 
  handlerType, 
  file, 
  ipInput, 
  toolType, 
  runCommand, 
  setRunCommand,
  nmapFunctionality 
}) => {
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    const executeCommand = async () => {
      if (!runCommand) return;

      setLoading(true);
      setError(null);
      setResult(null);

      try {
        let commandResponse;
        let command;

        if (toolType === "apk") {
          const formData = new FormData();
          formData.append("apkFile", file);

          const uploadResponse = await axios.post("http://localhost:4002/upload", formData);

          if (tool === "Androwarn") {
            command = {
              tool: "Androwarn",
              apkInfo: uploadResponse.data,
            };
            commandResponse = await axios.post("http://localhost:4002/run-command", command);
          } else if (tool === "Androbugs") {
            command = {
              tool: "Androbugs",
              apkInfo: uploadResponse.data,
            };
            commandResponse = await axios.post("http://localhost:4002/run-command", command);
          } else if (tool === "qark") {
            command = {
              tool: "qark",
              apkInfo: uploadResponse.data,
            };
            commandResponse = await axios.post("http://localhost:4002/run-command", command);
          } else if(tool === "APK-Tool") {
            fetch(`http://localhost:4002/apktool/run`, {
              method: "POST",
              body: formData,
              responseType: "arraybuffer",
            })
              .then((res) => res.arrayBuffer())
              .then((data) => {
                commandResponse = { data }; // Adjust as needed
              })
              .catch((error) => {
                console.error("Error running tool:", error);
              });
          } else {
            throw new Error("Invalid APK tool selected");
          }
          
        } else if (toolType === "ip") {
          if (tool === "nmap") {
            command = {
              tool: "nmap",
              nmapFunctionality: nmapFunctionality,
              ipAddress: ipInput
            };
          } else if(tool === "BurpSuite"){
            command = {
              tool: "BurpSuite",
              nmapFunctionality: nmapFunctionality,
              ipAddress: ipInput
            };
          } else if (tool === "Nikto") {
            command = {
              tool: "Nikto",
              ipAddress: ipInput,
            };
          } else {
            throw new Error("Invalid IP tool selected");
          }
          commandResponse = await axios.post("http://localhost:4002/run-tool", command);
        } else {
          throw new Error("Invalid tool type");
        }

        setResult(commandResponse.data);
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
        setRunCommand(false);
      }
    };

    executeCommand();
  }, [runCommand, tool, handlerType, file, ipInput, toolType, nmapFunctionality, setRunCommand]);

  const formatResult = (text) => {
    if (!text) return "";
    return text.replace(/\n/g, "<br />");
  };

  const styles = {
    container: {
      padding: '1em',
    },
    loading: {
      color: '#007bff',
      fontSize: '1.2em',
    },
    error: {
      color: '#dc3545',
      fontSize: '1.2em',
    },
    result: {
      border: '1px solid #ccc',
      padding: '1em',
      borderRadius: '5px',
      backgroundColor: '#f9f9f9',
      whiteSpace: 'pre-wrap', // Preserve whitespace and line breaks
    },
  };

  return (
    <div style={styles.container}>
      {loading && <p style={styles.loading}>Loading...</p>}
      {error && <p style={styles.error}>Error: {error}</p>}
      {result && tool === "Androbugs" && <AndrobugsResults result={result} />}
      {console.log("dd : ",tool)}
      {console.log("FF : ",result)}
      {result && tool !== "Androbugs" && (
        <div>
          <h3>Command Result:</h3>
          <pre>{JSON.stringify(result, null, 2)}</pre>
        </div>
      )}
    </div>
  );
};

export default Handlers;

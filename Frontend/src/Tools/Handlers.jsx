import React, { useEffect, useState } from "react";
import axios from "axios";

const Handlers = ({ 
  tool, 
  handlerType, 
  file, 
  ipInput, 
  toolType, 
  runCommand, 
  setRunCommand,
  nmapFunctionality 
}) => {
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);
  console.log("adlfja")

  useEffect(() => {
    const executeCommand = async () => {
      console.log("adlfja")
      if (!runCommand) return;

      console.log("Inside Handler - runCommand is true");
      console.log("toolType:", toolType);
      console.log("tool:", tool);
      console.log("ipInput:", ipInput);
      console.log("file:", file);
      console.log("nmapFunctionality:", nmapFunctionality);
      
      setLoading(true);
      setError(null);
      setResult(null);

      try {
        let commandResponse;
        let command;

        if (toolType === "apk") {
          const formData = new FormData();
          formData.append("apkFile", file);

          const uploadResponse = await axios.post("http://localhost:4002/upload", formData);
          console.log("File upload response:", uploadResponse.data);

          if (tool === "Androwarn") {
            command = {
              tool: "Androwarn",
              apkInfo: uploadResponse.data,
            };
            commandResponse = await axios.post("http://localhost:4002/run-command", command);
          } else if (tool === "Androbugs") {
            command = {
              tool: "Androbugs",
              apkInfo: uploadResponse.data,
            };
            commandResponse = await axios.post("http://localhost:4002/run-command", command);
          } else if (tool === "qark") {
            command = {
              tool: "qark",
              apkInfo: uploadResponse.data,
            };
            commandResponse = await axios.post("http://localhost:4002/run-command", command);
          } else if(tool === "APK-Tool") {
            fetch(`http://localhost:4002/apktool/run`, {
              method: "POST",
              body: formData,
              responseType: "arraybuffer",
            })
              .then((res) => {
                console.log("x : ",res)
                console.log("y : ",res.data)
                res.arrayBuffer()
                commandResponse = res
          })
              .catch((error) => {
                console.error("Error running tool:", error);
              });
          }
          else {
            throw new Error("Invalid APK tool selected");
          }
          
        } else if (toolType === "ip") {
          console.log("Inside IP - preparing command");
          if (tool === "nmap") {
            command = {
              tool: "nmap",
              nmapFunctionality: nmapFunctionality,
              ipAddress: ipInput
            };
            console.log("Nmap details: ", command);
          } else if(tool === "BurpSuite"){
            command = {
              tool: "BurpSuite",
              nmapFunctionality: nmapFunctionality,
              ipAddress: ipInput
            };
          }
          else if (tool === "Nikto") {
            command = {
              tool: "Nikto",
              ipAddress: ipInput,
            };
          } else {
            throw new Error("Invalid IP tool selected");
          }
          commandResponse = await axios.post("http://localhost:4002/run-tool", command);
        } else {
          throw new Error("Invalid tool type");
        }

        

        console.log("Command execution response:", commandResponse.data);
        setResult(commandResponse.data);
      } catch (error) {
        console.error("Error executing command:", error);
        setError(error.message);
      } finally {
        setLoading(false);
        setRunCommand(false);
      }
    };

    executeCommand();
  }, [runCommand, tool, handlerType, file, ipInput, toolType, nmapFunctionality, setRunCommand]);

  return (
    <div className="handlers">
      {loading && <p>Loading...</p>}
      {error && <p>Error: {error}</p>}
      {result && (
        <div>
          <h3>Command Result:</h3>
          <pre>{JSON.stringify(result, null, 2)}</pre>
        </div>
      )}
    </div>
  );
};

export default Handlers;

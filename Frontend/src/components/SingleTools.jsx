import React, { useState } from "react";
import toolsinfo from "../utils/toolsInfo.json";
import Handlers from "../Tools/Handlers";
import "./SingleTools.css";
import axios from "axios";

const SingleTools = () => {
  const [selectedCategory, setSelectedCategory] = useState("");
  const [selectedTool, setSelectedTool] = useState("");
  const [toolType, setToolType] = useState("");
  const [handlerType, setHandlerType] = useState("");
  const [file, setFile] = useState(null);
  const [ipInput, setIpInput] = useState("");
  const [runCommand, setRunCommand] = useState(false);
  const [nmapFunctionality, setNmapFunctionality] = useState("");

  const handleCategoryChange = (event) => {
    const category = event.target.value;
    setSelectedCategory(category);
    setSelectedTool("");
    setToolType("");
    setHandlerType("");
    setRunCommand(false);
    setNmapFunctionality("");
    setIpInput("");
    console.log("Category changed:", category);
  };

  const handleToolChange = (event) => {
    const toolName = event.target.value;
    if (toolName === "") {
      setSelectedTool("");
      setToolType("");
      setHandlerType("");
    } else {
      const tool = toolsinfo[selectedCategory].find(
        (tool) => tool.name === toolName
      );
      setSelectedTool(toolName);
      setToolType(tool.type);
      setHandlerType(tool.handler);
    }
    setRunCommand(false);
    setNmapFunctionality("");
    setIpInput("");
    console.log("Tool changed:", toolName);
  };

  const handleFileChange = (event) => {
    const selectedFile = event.target.files[0];
    setFile(selectedFile);
    setRunCommand(false);
    console.log("File selected:", selectedFile);
  };

  const handleIpInputChange = (event) => {
    setIpInput(event.target.value);
    setRunCommand(false);
    console.log("IP input changed:", event.target.value);
  };

  const handleNmapFunctionalityChange = (event) => {
    setNmapFunctionality(event.target.value);
    setRunCommand(false);
    console.log("Nmap functionality changed:", event.target.value);
  };

  const handleClick = () => {
    console.log("Button Clicked");
    console.log("toolType:", toolType);
    console.log("selectedTool:", selectedTool);
    console.log("file:", file);
    console.log("ipInput:", ipInput);
    console.log("nmapFunctionality:", nmapFunctionality);

    if (toolType === "apk" && !file) {
      console.error("No file selected");
      return;
    }
    if (toolType === "ip" && !ipInput) {
      console.error("No IP input provided");
      return;
    }
    if (selectedTool === "nmap" && !nmapFunctionality) {
      console.error("No Nmap functionality selected");
      return;
    }
    setRunCommand(true);
    console.log("Set runCommand to true");
  };

  const runJDGUI = async () => {
    const res = await axios.post("http://localhost:4002/jd-gui/run")
    console.log(res.data)
  }

  return (
    <div className="singleToolcontainer">
      <div className="singleToolcontent">
        {/* Category Selection */}
        <div className="category-selection">
          <label htmlFor="category-select" className="category-select-tool">Select Category:</label>
          <select
            id="category-select"
            onChange={handleCategoryChange}
            value={selectedCategory}
          >
            <option value="">--Select a Category--</option>
            {Object.keys(toolsinfo).map((category, index) => (
              <option key={index} value={category}>
                {category}
              </option>
            ))}
          </select>
        </div>

        {/* Tool Selection */}
        {selectedCategory && (
          <div className="tool-selection">
            <label htmlFor="tool-select" className="tool-select-label">Select Tool:</label>
            <select
              id="tool-select"
              onChange={handleToolChange}
              value={selectedTool}
            >
              <option value="">--Select a Tool--</option>
              {toolsinfo[selectedCategory].map((tool, index) => (
                <option key={index} value={tool.name}>
                  {tool.name}
                </option>
              ))}
            </select>
          </div>
        )}

        {/* File Upload for APK */}
        {toolType === "apk" && (
          <div className="file-upload">
            <label htmlFor="file-input" className="file-input-label">Upload APK File:</label>
            <input
              type="file"
              id="file-input"
              accept=".apk"
              onChange={handleFileChange}
            />
          </div>
        )}

        {/* Nmap Functionality Selection */}
        {selectedTool === "nmap" && (
          <div className="nmap-functionality">
            <label htmlFor="nmap-functionality" className="nmap-functionality-label">Select Nmap Functionality:</label>
            <select
              id="nmap-functionality"
              onChange={handleNmapFunctionalityChange}
              value={nmapFunctionality}
            >
              <option value="">--Select Nmap Functionality--</option>
              <option value="Version">Version</option>
              <option value="TCP SYN Scan">TCP SYN Scan</option>
              <option value="TCP Connect Scan">TCP Connect Scan</option>
              <option value="UDP Scan">UDP Scan</option>
              <option value="Host Scan">Host Scan</option>
            </select>
          </div>
        )}

        {/* IP Input for IP tools */}
        {toolType === "ip" && (selectedTool !== "nmap" || nmapFunctionality) && (
          <div className="ip-input">
            <label htmlFor="ip-input" className="ip-input-label">Enter IP Address:</label>
            <input
              type="text"
              id="ip-input"
              value={ipInput}
              onChange={handleIpInputChange}
              placeholder="Enter IP address"
            />
          </div>
        )}

        {/* Run Command Button */}
        {selectedTool && selectedTool!=="JD-GUI" && (
          <div className="single-run-button">
            <button onClick={handleClick}>Run Command</button>
          </div>
        )}

        {selectedTool && selectedTool==="JD-GUI" && (
          <div className="single-run-button">
            <button onClick={runJDGUI}>Run Command</button>
          </div>
        )}

        {/* Handlers component */}
        {console.log(selectedTool)}
        {console.log(handlerType)}
        {console.log(toolType)}

        {selectedTool && handlerType && (toolType === "apk" ? file : ipInput) && (
          <Handlers 
            tool={selectedTool} 
            handlerType={handlerType} 
            file={file}
            ipInput={ipInput}
            toolType={toolType}
            runCommand={runCommand}
            setRunCommand={setRunCommand}
            nmapFunctionality={nmapFunctionality}
          />
        )}
      </div>
    </div>
  );
};

export default SingleTools;

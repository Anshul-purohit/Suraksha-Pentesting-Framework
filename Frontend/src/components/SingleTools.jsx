import React, { useState } from "react";
import toolsinfo from "../utils/toolsInfo.json";
import Handlers from "../Tools/Handlers";
import './SingleTools.css'; // Import the CSS file

const SingleTools = () => {
  const [selectedCategory, setSelectedCategory] = useState("");
  const [selectedTool, setSelectedTool] = useState("");
  const [toolType, setToolType] = useState("");
  const [handlerType, setHandlerType] = useState("");
  const [showHandler, setShowHandler] = useState(false);

  const handleCategoryChange = (event) => {
    const category = event.target.value;
    setSelectedCategory(category);
    setSelectedTool("");
    setToolType("");
    setHandlerType("");
    setShowHandler(false);
  };

  const handleToolChange = (event) => {
    const toolName = event.target.value;
    if (toolName === "") {
      setSelectedTool("");
      setToolType("");
      setHandlerType("");
      setShowHandler(false);
    } else {
      const tool = toolsinfo[selectedCategory].find(tool => tool.name === toolName);
      setSelectedTool(toolName);
      setToolType(tool.type);
      setHandlerType(tool.handler);
      setShowHandler(false);
    }
    console.log("xx : ", toolName);
    console.log("yy : ", toolType);
    console.log("zz : ", handlerType);
  };

  const handleClick = () => {
    console.log("Selected tool:", selectedTool);
    console.log("xyz : ", handlerType);
    setShowHandler(true);
  };

  return (
    <div className="container">
      <div className="content">
        {/* Category Selection */}
        <div className="category-selection">
          <label htmlFor="category-select">Select Category:</label>
          <select id="category-select" onChange={handleCategoryChange} value={selectedCategory}>
            <option value="">--Select a Category--</option>
            {Object.keys(toolsinfo).map((category, index) => (
              <option key={index} value={category}>
                {category}
              </option>
            ))}
          </select>
        </div>

        {/* Tool Selection */}
        {selectedCategory && (
          <div className="tool-selection">
            <label htmlFor="tool-select">Select Tool:</label>
            <select id="tool-select" onChange={handleToolChange} value={selectedTool}>
              <option value="">--Select a Tool--</option>
              {toolsinfo[selectedCategory].map((tool, index) => (
                <option key={index} value={tool.name}>
                  {tool.name}
                </option>
              ))}
            </select>
          </div>
        )}

        {/* Input Fields Based on Tool Type */}
        {toolType && (
          <div className="input-fields">
            {toolType === "apk" && (
              <div className="file-input-container">
                <label htmlFor="file-input" className="custom-file-upload">
                  Choose File
                </label>
                <br />
                <input
                  type="file"
                  accept=".apk"
                  id="file-input"
                  className="custom-file-input"
                />
              </div>
            )}
            {toolType === "ip" && (
              <div className="ip-input-container">
                <label htmlFor="ip-input" className="custom-ip-upload">
                  Enter details
                </label>
                <br />
                <input
                  type="text"
                  placeholder="Enter text"
                  id="ip-input"
                />
              </div>
            )}
          </div>
        )}

        {/* Run Button */}
        {selectedTool && (
          <div>
            <button
              type="button"
              className="btn btn-primary"
              onClick={handleClick}
            >
              Run
            </button>
          </div>
        )}
      </div>

      {/* Render the Handlers component conditionally */}
      {showHandler && <Handlers handle={handlerType} />}
    </div>
  );
};

export default SingleTools;

import React, { useState } from "react";
import toolsinfo from "../utils/toolsInfo.json";
import Handlers from "../Tools/Handlers";
import "./SingleTools.css";

const SingleTools = () => {
  const [selectedCategory, setSelectedCategory] = useState("");
  const [selectedTool, setSelectedTool] = useState("");
  const [toolType, setToolType] = useState("");
  const [handlerType, setHandlerType] = useState("");
  const [showHandler, setShowHandler] = useState(false);
  const [file, setFile] = useState(null);

  const handleCategoryChange = (event) => {
    const category = event.target.value;
    setSelectedCategory(category);
    setSelectedTool("");
    setToolType("");
    setHandlerType("");
    setShowHandler(false);
  };

  const handleToolChange = (event) => {
    const toolName = event.target.value;
    if (toolName === "") {
      setSelectedTool("");
      setToolType("");
      setHandlerType("");
      setShowHandler(false);
    } else {
      const tool = toolsinfo[selectedCategory].find(
        (tool) => tool.name === toolName
      );
      setSelectedTool(toolName);
      setToolType(tool.type);
      setHandlerType(tool.handler);
      setShowHandler(false);
    }
  };

  const handleFileChange = (event) => {
    const selectedFile = event.target.files[0];
    setFile(selectedFile);
  };

  const handleClick = async () => {
    if (!file) {
      console.error("No file selected");
      return;
    }

    const formData = new FormData();
    formData.append("apkFile", file);

    try {
      const response = await fetch("http://localhost:4002/upload", {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        throw new Error("Upload failed");
      }

      const data = await response.json();
      console.log("File upload successful:", data);

      // Pass tool and handlerType to Handlers component
      setShowHandler(true);
    } catch (error) {
      console.error("Error uploading file:", error.message);
    }
  };

  return (
    <div className="container">
      <div className="content">
        {/* Category Selection */}
        <div className="category-selection">
          <label htmlFor="category-select">Select Category:</label>
          <select
            id="category-select"
            onChange={handleCategoryChange}
            value={selectedCategory}
          >
            <option value="">--Select a Category--</option>
            {Object.keys(toolsinfo).map((category, index) => (
              <option key={index} value={category}>
                {category}
              </option>
            ))}
          </select>
        </div>

        {/* Tool Selection */}
        {selectedCategory && (
          <div className="tool-selection">
            <label htmlFor="tool-select">Select Tool:</label>
            <select
              id="tool-select"
              onChange={handleToolChange}
              value={selectedTool}
            >
              <option value="">--Select a Tool--</option>
              {toolsinfo[selectedCategory].map((tool, index) => (
                <option key={index} value={tool.name}>
                  {tool.name}
                </option>
              ))}
            </select>
          </div>
        )}

        {/* File Upload */}
        {toolType === "apk" && (
          <div className="file-upload">
            <label htmlFor="file-input">Upload APK File:</label>
            <input
              type="file"
              id="file-input"
              accept=".apk"
              onChange={handleFileChange}
            />
          </div>
        )}

        {/* Run Command Button */}
        {selectedTool && (
          <div className="run-button">
            <button onClick={handleClick}>Run Command</button>
          </div>
        )}

        {/* Handlers component */}
        {showHandler && handlerType && (
          <Handlers tool={selectedTool} handlerType={handlerType} file={file} />
        )}
      </div>
    </div>
  );
};

export default SingleTools;

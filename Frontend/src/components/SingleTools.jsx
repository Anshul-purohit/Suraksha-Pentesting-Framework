import React, { useState } from "react";
import toolsinfo from "../utils/toolsInfo.json";

const SingleTools = () => {
  const [selectedCategory, setSelectedCategory] = useState("");
  const [selectedTool, setSelectedTool] = useState("");
  const [toolType, setToolType] = useState("");

  const handleCategoryChange = (event) => {
    const category = event.target.value;
    setSelectedCategory(category);
    setSelectedTool("");
    setToolType("");
  };

  const handleToolChange = (event) => {
    const toolName = event.target.value;
    const tool = toolsinfo[selectedCategory].find(tool => tool.name === toolName);
    setSelectedTool(toolName);
    setToolType(tool.type);
  };

  const handleClick = () => {
    console.log("Selected tool:", selectedTool);
  };

  return (
    <div className="container">
      <div className="content">
        {/* Category Selection */}
        <div className="category-selection">
          <label htmlFor="category-select">Select Category:</label>
          <select id="category-select" onChange={handleCategoryChange} value={selectedCategory}>
            <option value="">--Select a Category--</option>
            {Object.keys(toolsinfo).map((category, index) => (
              <option key={index} value={category}>
                {category}
              </option>
            ))}
          </select>
        </div>

        {/* Tool Selection */}
        {selectedCategory && (
          <div className="tool-selection">
            <label htmlFor="tool-select">Select Tool:</label>
            <select id="tool-select" onChange={handleToolChange} value={selectedTool}>
              <option value="">--Select a Tool--</option>
              {toolsinfo[selectedCategory].map((tool, index) => (
                <option key={index} value={tool.name}>
                  {tool.name}
                </option>
              ))}
            </select>
          </div>
        )}

        {/* Input Fields Based on Tool Type */}
        {toolType && (
          <div className="input-fields">
            {toolType === "apk" && (
              <div className="file-input-container">
                <label htmlFor="file-input" className="custom-file-upload">
                  Choose File
                </label>
                <br />
                <input
                  type="file"
                  accept=".apk"
                  id="file-input"
                  className="custom-file-input"
                />
              </div>
            )}
            {toolType === "ip" && (
              <div className="ip-input-container">
                <label htmlFor="ip-input" className="custom-ip-upload">
                  Enter details
                </label>
                <br />
                <input
                  type="text"
                  placeholder="Enter text"
                  id="ip-input"
                />
              </div>
            )}
          </div>
        )}

        {/* Run Button */}
        {selectedTool && (
          <div>
            <button
              type="button"
              className="btn btn-primary"
              onClick={handleClick}
            >
              Run
            </button>
          </div>
        )}
      </div>

      {/* Scoped CSS */}
      <style jsx>{`
        .container {
          display: flex;
          justify-content: center;
          align-items: center;
          height: 100vh;
          background-color: #f1f1f1;
        }

        .content {
          width: 400px;
          max-height: 80vh;
          overflow-y: auto;
          background-color: white;
          padding: 40px;
          border-radius: 8px;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
          text-align: center;
          transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .content:hover {
          transform: translateY(-10px);
          box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }

        .category-selection, .tool-selection, .input-fields {
          margin-bottom: 20px;
        }

        label {
          display: block;
          margin-bottom: 10px;
          font-weight: bold;
        }

        select, input[type="file"], input[type="text"] {
          width: 100%;
          padding: 10px;
          border: 1px solid #ddd;
          border-radius: 4px;
          transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        select {
          appearance: none;
          background: url('data:image/svg+xml;utf8,<svg fill="%23999" height="16" viewBox="0 0 24 24" width="16" xmlns="http://www.w3.org/2000/svg"><path d="M7 10l5 5 5-5z"/></svg>') no-repeat right 10px center;
          background-color: white;
        }

        select:focus, input[type="file"]:focus, input[type="text"]:focus {
          border-color: #007bff;
          box-shadow: 0 0 8px rgba(0, 123, 255, 0.25);
        }

        .btn-primary {
          background-color: #007bff;
          color: white;
          border: none;
          padding: 10px 20px;
          border-radius: 4px;
          cursor: pointer;
          transition: background-color 0.3s ease, transform 0.3s ease;
        }

        .btn-primary:hover {
          background-color: #0056b3;
          transform: translateY(-2px);
        }
      `}</style>
    </div>
  );
};

export default SingleTools;

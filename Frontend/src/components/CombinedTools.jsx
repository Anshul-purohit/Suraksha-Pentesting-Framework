import React, { useState } from "react";
import axios from "axios";
import toolsinfo from "../utils/toolsInfo.json";
import AndrobugsResults from "../Tools/AndrobugsResults";
import QarkResults from "../Tools/QarkResults";
import APKToolResults from "../Tools/APKToolResults";


const generateInitialState = (toolsinfo) => {
  const initialState = {};
  Object.keys(toolsinfo).forEach((category) => {
    toolsinfo[category].forEach((tool) => {
      initialState[tool.name] = false;
    });
  });
  return initialState;
};

const CombinedTools = () => {
  const initialState = generateInitialState(toolsinfo);
  const [selectedTools, setSelectedTools] = useState(initialState);
  const [apkFile, setApkFile] = useState(null);
  const [ipInput, setIpInput] = useState("");
  const [nmapFunctionality, setNmapFunctionality] = useState("");
  const [responses, setResponses] = useState({});
  const [loading, setLoading] = useState(false);
  const [showResults, setShowResults] = useState(false);

  const handleCheckboxChange = (event) => {
    const { id, checked } = event.target;
    setSelectedTools((prevState) => ({
      ...prevState,
      [id]: checked,
    }));
  };

  const handleApkChange = (event) => {
    const file = event.target.files[0];
    setApkFile(file);
    console.log("Selected APK File:", file ? file.name : "No file selected");
  };

  const handleIpChange = (event) => {
    const ip = event.target.value;
    setIpInput(ip);
    console.log("Entered IP Address:", ip);
  };

  const handleNmapFunctionalityChange = (event) => {
    const functionality = event.target.value;
    setNmapFunctionality(functionality);
    console.log("Selected Nmap Functionality:", functionality);
  };

  const runTool = async (tool) => {
    const formData = new FormData();
    if (apkFile) {
      formData.append("apkFile", apkFile);
    }

    try {
      console.log(`Running tool: ${tool}`);
      switch (tool) {
        case "JD-GUI":
          return await axios.post("http://localhost:4002/jd-gui/run");
        case "BurpSuite":
          return await axios.post("http://localhost:4002/run-tool", {
            tool: "BurpSuite",
          });
        case "nmap":
          if (!ipInput || !nmapFunctionality) {
            throw new Error("IP address or Nmap functionality is missing.");
          }
          return await axios.post("http://localhost:4002/run-tool", {
            tool: "nmap",
            nmapFunctionality,
            ipAddress: ipInput,
          });
        case "Classyshark":
          return await axios.post("http://localhost:4002/classyshark/run");
        case "Androwarn":
        case "Androbugs":
        case "qark":
        case "APKLeaks":
          console.log(`Uploading APK for ${tool}`);
          const uploadResponse = await axios.post("http://localhost:4002/upload", formData);
          console.log(`Upload response for ${tool}:`, uploadResponse.data);
          const toolResponse = await axios.post("http://localhost:4002/run-command", {
            tool,
            apkInfo: uploadResponse.data
          });
          console.log(`Tool response for ${tool}:`, toolResponse.data);
          return toolResponse;
        case "APK-Tool":
          console.log("Running APK-Tool");
          const response = await fetch("http://localhost:4002/apktool/run", {
            method: "POST",
            body: formData,
          });
          const arrayBuffer = await response.arrayBuffer();
          const decoder = new TextDecoder("utf-8");
          const decodedResponse = decoder.decode(arrayBuffer);
          console.log("APK-Tool response:", decodedResponse);
          return decodedResponse;
        default:
          throw new Error(`Unknown tool: ${tool}`);
      }
    } catch (error) {
      console.error(`Error running ${tool}:`, error);
      throw error;
    }
  };

  const handleClick = async () => {
    setLoading(true);
    setShowResults(false);
    setResponses({});

    const selected = Object.keys(selectedTools).filter((key) => selectedTools[key]);
    console.log("Selected tools:", selected);

    try {
      const results = await Promise.all(
        selected.map(async (tool) => {
          try {
            const response = await runTool(tool);
            console.log(`Response from ${tool}:`, response);
            return { tool, data: response.data || response };
          } catch (error) {
            console.error(`Error in ${tool}:`, error);
            return { tool, error: error.message };
          }
        })
      );

      const newResponses = results.reduce((acc, { tool, data, error }) => {
        acc[tool] = error ? { error } : data;
        return acc;
      }, {});

      console.log("All responses:", newResponses);
      setResponses(newResponses);
      setShowResults(true);
    } catch (error) {
      console.error("Error running tools:", error);
    } finally {
      setLoading(false);
    }
  };

  const containerStyle = {
    padding: "20px",
    margin: "auto",
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
  };

  const inputStyle = {
    margin: "10px 0",
    padding: "10px",
    width: "300px",
  };

  const buttonStyle = {
    margin: "20px 0",
    padding: "10px 20px",
    fontSize: "16px",
    cursor: "pointer",
  };

  const loadingStyle = {
    textAlign: "center",
    margin: "20px",
    fontSize: "18px",
    color: "#007bff",
  };

  const resultsContainerStyle = {
    margin: "20px",
    padding: "20px",
    border: "1px solid #ddd",
    borderRadius: "5px",
    backgroundColor: "#f9f9f9",
    width: "80%",
    maxWidth: "800px",
  };

  const resultTitleStyle = {
    marginBottom: "10px",
    color: "#007bff",
  };

  const resultContentStyle = {
    backgroundColor: "#f1f1f1",
    padding: "10px",
    borderRadius: "5px",
    overflowX: "auto",
    whiteSpace: "pre-wrap",
    wordBreak: "break-word",
  };

  return (
    <div style={containerStyle}>
      <input
        type="file"
        accept=".apk"
        onChange={handleApkChange}
        style={inputStyle}
      />
      <input
        type="text"
        placeholder="Enter IP Address"
        value={ipInput}
        onChange={handleIpChange}
        style={inputStyle}
      />
      <select
        value={nmapFunctionality}
        onChange={handleNmapFunctionalityChange}
        style={inputStyle}
      >
        <option value="">--Select Nmap Functionality--</option>
        <option value="Version">Version</option>
        <option value="TCP SYN Scan">TCP SYN Scan</option>
        <option value="TCP Connect Scan">TCP Connect Scan</option>
        <option value="UDP Scan">UDP Scan</option>
        <option value="Host Scan">Host Scan</option>
      </select>

      {Object.entries(toolsinfo).map(([category, tools]) => (
        <div key={category} style={{ margin: "20px 0" }}>
          <h3>{category}</h3>
          {tools.map((tool) => (
            <div key={tool.name}>
              <input
                type="checkbox"
                id={tool.name}
                checked={selectedTools[tool.name]}
                onChange={handleCheckboxChange}
              />
              <label htmlFor={tool.name}>{tool.name}</label>
            </div>
          ))}
        </div>
      ))}

      <button onClick={handleClick} style={buttonStyle}>
        Run Selected Tools
      </button>

      {loading && (
        <div style={loadingStyle}>Running tools...</div>
      )}

      {showResults && (
        <div style={resultsContainerStyle}>
          <h3>Results:</h3>
          {Object.entries(responses).map(([tool, result]) => (
            <div key={tool}>
              <h4 style={resultTitleStyle}>{tool}</h4>
              {tool === "Androbugs" && (
                <AndrobugsResults result={result} />
              )}
              {tool === "qark" && (
                <QarkResults results={result} />
              )}
              {tool === "APK-Tool" && (
                <APKToolResults result={result} />
              )}
              {tool !== "Androbugs" && tool !== "qark" && tool !== "APK-Tool" && (
                <pre style={resultContentStyle}>
                  {typeof result === 'object'
                    ? JSON.stringify(result, null, 2)
                    : result}
                </pre>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default CombinedTools;
import React, { useState } from "react";
import toolsinfo from "../utils/toolsInfo.json";
import axios from "axios";

const generateInitialState = (toolsinfo) => {
  const initialState = {};
  Object.keys(toolsinfo).forEach((category) => {
    toolsinfo[category].forEach((tool) => {
      initialState[tool.name] = false;
    });
  });
  return initialState;
};

const CombinedTools = () => {
  const initialState = generateInitialState(toolsinfo);
  const [selectedTools, setSelectedTools] = useState(initialState);
  const [apkFile, setApkFile] = useState(null);
  const [ipInput, setIpInput] = useState("");
  const [nmapFunctionality, setNmapFunctionality] = useState("");
  const [responses, setResponses] = useState({});
  const [loading, setLoading] = useState(false);
  const [showResults, setShowResults] = useState(false);

  const handleCheckboxChange = (event) => {
    const { id, checked } = event.target;
    setSelectedTools((prevState) => ({
      ...prevState,
      [id]: checked,
    }));
  };

  const handleApkChange = (event) => {
    const file = event.target.files[0];
    setApkFile(file);
    console.log("Selected APK File:", file ? file.name : "No file selected");
  };

  const handleIpChange = (event) => {
    const ip = event.target.value;
    setIpInput(ip);
    console.log("Entered IP Address:", ip);
  };

  const handleNmapFunctionalityChange = (event) => {
    const functionality = event.target.value;
    setNmapFunctionality(functionality);
    console.log("Selected Nmap Functionality:", functionality);
  };

  const runTool = async (tool) => {
    switch (tool) {
      case "JD-GUI":
        return axios.post("http://localhost:4002/jd-gui/run");
      case "BurpSuite":
        return axios.post("http://localhost:4002/run-tool", {
          tool: "BurpSuite",
        });
      case "nmap":
        if (!ipInput || !nmapFunctionality) {
          throw new Error("IP address or Nmap functionality is missing.");
        }
        return axios.post("http://localhost:4002/run-tool", {
          tool: "nmap",
          nmapFunctionality,
          ipAddress: ipInput,
        });
      default:
        throw new Error(`Unknown tool: ${tool}`);
    }
  };

  const handleClick = async () => {
    setLoading(true);
    setShowResults(false);
    setResponses({}); 

    const selected = Object.keys(selectedTools).filter((key) => selectedTools[key]);
    console.log("Selected tools:", selected);

    try {
      const results = await Promise.all(
        selected.map(async (tool) => {
          try {
            const response = await runTool(tool);
            return { tool, data: response.data };
          } catch (error) {
            return { tool, error: error.message };
          }
        })
      );

      const newResponses = results.reduce((acc, { tool, data, error }) => {
        acc[tool] = error ? { error } : data;
        return acc;
      }, {});

      setResponses(newResponses);
      setShowResults(true);
    } catch (error) {
      console.error("Error running tools:", error);
    } finally {
      setLoading(false);
    }
  };

  const containerStyle = {
    padding: "20px",
    margin: "auto",
    display: "flex",
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "flex-start",
    flexWrap: "wrap",
  };

  const fileInputStyle = {
    border: "1px solid black",
    padding: "10px",
    height: "48px",
    backgroundColor: "white",
    width: "200px",
  };

  const ipInputStyle = {
    border: "1px solid black",
    padding: "10px",
    height: "48px",
    width: "200px",
  };

  const selectStyle = {
    border: "1px solid black",
    padding: "10px",
    height: "48px",
    marginLeft: "10px",
    backgroundColor: "white",
  };

  const buttonStyle = {
    marginBottom: "20px",
  };

  const loadingStyle = {
    textAlign: "center",
    margin: "20px",
  };

  const loadingTextStyle = {
    fontSize: "20px",
    color: "#007bff",
  };

  const resultsContainerStyle = {
    margin: "20px",
    padding: "20px",
    border: "1px solid #ddd",
    borderRadius: "5px",
    backgroundColor: "#f9f9f9",
  };

  const resultTitleStyle = {
    marginBottom: "10px",
    color: "#007bff",
  };

  const resultContentStyle = {
    backgroundColor: "#f1f1f1",
    padding: "10px",
    borderRadius: "5px",
    overflowX: "auto",
  };

  return (
    <>
      <div style={containerStyle}>
        <div className="file-input-container" style={{ marginRight: "20px" }}>
          <label
            htmlFor="file-input"
            className="custom-file-upload"
            style={{ marginBottom: "5px", display: "block" }}
          >
            Choose File
          </label>
          <input
            type="file"
            accept=".apk"
            id="file-input"
            className="custom-file-input"
            style={fileInputStyle}
            onChange={handleApkChange}
          />
        </div>

        <div className="ip-input-container" style={{ marginRight: "20px" }}>
          <label
            htmlFor="ip-input"
            className="custom-ip-upload"
            style={{ marginBottom: "5px", display: "block" }}
          >
            Type IP Address
          </label>
          <input
            type="text"
            placeholder="0.0.0.0"
            id="ip-input"
            style={ipInputStyle}
            value={ipInput}
            onChange={handleIpChange}
          />
        </div>

        <div className="nmap-functionality" style={{ marginTop: "10px" }}>
          <label htmlFor="nmap-functionality" className="nmap-functionality-label">
            Select Nmap Functionality:
          </label>
          <select
            id="nmap-functionality"
            style={selectStyle}
            value={nmapFunctionality}
            onChange={handleNmapFunctionalityChange}
          >
            <option value="">--Select Nmap Functionality--</option>
            <option value="Version">Version</option>
            <option value="TCP SYN Scan">TCP SYN Scan</option>
            <option value="TCP Connect Scan">TCP Connect Scan</option>
            <option value="UDP Scan">UDP Scan</option>
            <option value="Host Scan">Host Scan</option>
          </select>
        </div>
      </div>

      <div className="container">
        {Object.keys(toolsinfo).map((category, categoryIndex) => (
          <div key={categoryIndex} className="card bg-light mb-3">
            <div className="card-body">
              <h5>{category}</h5>
              <div style={{ display: "flex", flexWrap: "wrap" }}>
                {toolsinfo[category].map((tool, toolIndex) => (
                  <div key={toolIndex} className="card-body-tool">
                    <input
                      type="checkbox"
                      id={tool.name}
                      onChange={handleCheckboxChange}
                    />
                    <label htmlFor={tool.name} style={{ marginRight: "20px", padding: "5px" }}>
                      {tool.name}
                    </label>
                  </div>
                ))}
              </div>
            </div>
          </div>
        ))}
        <div>
          <button
            type="button"
            className="btn btn-primary"
            onClick={handleClick}
            style={buttonStyle}
          >
            Run
          </button>
        </div>
      </div>

      {loading && (
        <div style={loadingStyle}>
          <p style={loadingTextStyle}>Loading...</p>
        </div>
      )}

      {showResults && (
        <div style={resultsContainerStyle}>
          <h3>Results:</h3>
          {Object.keys(responses).map((tool) => (
            <div key={tool} className="result">
              <h5 style={resultTitleStyle}>{tool}</h5>
              <pre style={resultContentStyle}>{JSON.stringify(responses[tool], null, 2)}</pre>
            </div>
          ))}
        </div>
      )}
    </>
  );
};

export default CombinedTools;

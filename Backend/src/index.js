import express from "express";
import dotenv from "dotenv";
import { exec } from "child_process";
import cors from "cors";

dotenv.config({
  path: "./.env",
});

const port = process.env.PORT || 4002;
const app = express();
app.use(cors());

app.get("/run-adb-command", (req, res) => {
  const adbDevicesCommand = "/usr/bin/adb devices";

  exec(adbDevicesCommand, (error, stdout, stderr) => {
    if (error) {
      console.log("ERROR IN ADB");
      console.error("Error executing ADB devices command 1:", error);
      res.status(500).json({ error: "Error executing ADB devices command 2" });
      return;
    }
    console.log("ADB devices command output:", stdout);

    const devicesOutput = stdout
      .split("\n")
      .filter(
        (line) =>
          line.trim().length > 0 && !line.includes("List of devices attached")
      )
      .map((line) => line.split("\t")[0]);

    let commands = [];
    if (devicesOutput.length > 0) {
      commands = [
        "reboot",
        "shell dumpsys battery",
        "shell pm list packages",
        "shell wm size",
        "shell getprop",
        "shell df",
        "shell top",
        "shell ip address show",
        "shell dumpsys sensorservice",
      ];
    }
    res.json({ devices: devicesOutput, commands });
  });
});

app.get("/execute-adb-command/:deviceID/:command", (req, res) => {
  const adbDeviceID = req.params.deviceID;
  const adbCommand = req.params.command;
  const fullAdbCommand = `adb -s ${adbDeviceID} ${adbCommand}`;

  exec(fullAdbCommand, (error, stdout, stderr) => {
    if (error) {
      console.log("ERROR IN ADB 2");
      console.error("Error executing ADB command 3:", error);
      res.status(500).json({ error: "Error executing ADB command 4" });
      return;
    }
    console.log("ADB command output:", stdout);
    res.json({ output: stdout });
  });
});

app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});

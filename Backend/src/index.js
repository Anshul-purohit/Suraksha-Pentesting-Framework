import express from "express";
import dotenv from "dotenv";
import { exec } from "child_process";
import cors from "cors";
import multer from "multer";
import path from "path";
import fs from "fs";
import bodyParser from "body-parser";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config({
  path: "./.env",
});

const port = process.env.PORT || 4002;
const app = express();
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// #################################################################################################

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "src/uploads"); // specify the upload directory
  },
  filename: function (req, file, cb) {
    cb(null, "latest.apk"); // always save as 'latest.apk'
  },
});

const upload = multer({ storage: storage });

app.post("/upload", upload.single("apkFile"), (req, res) => {
  if (!req.file) {
    return res.status(400).json({ message: "No file uploaded" });
  }
  // Return file information
  res.json(req.file);
});

// Serve static files (optional)
// app.use(express.static("uploads"));

// ##################################################################################################

app.get("/run-adb-command", (req, res) => {
  const adbDevicesCommand = "/usr/bin/adb devices";

  exec(adbDevicesCommand, (error, stdout, stderr) => {
    if (error) {
      console.log("ERROR IN ADB");
      console.error("Error executing ADB devices command 1:", error);
      res.status(500).json({ error: "Error executing ADB devices command 2" });
      return;
    }
    console.log("ADB devices command output:", stdout);

    const devicesOutput = stdout
      .split("\n")
      .filter(
        (line) =>
          line.trim().length > 0 && !line.includes("List of devices attached")
      )
      .map((line) => line.split("\t")[0]);

    let commands = [];
    if (devicesOutput.length > 0) {
      commands = [
        "reboot",
        "shell dumpsys battery",
        "shell pm list packages",
        "shell wm size",
        "shell getprop",
        "shell df",
        "shell top",
        "shell ip address show",
        "shell dumpsys sensorservice",
      ];
    }
    res.json({ devices: devicesOutput, commands });
  });
});

app.get("/execute-adb-command/:deviceID/:command", (req, res) => {
  const adbDeviceID = req.params.deviceID;
  const adbCommand = req.params.command;
  const fullAdbCommand = `adb -s ${adbDeviceID} ${adbCommand}`;

  exec(fullAdbCommand, (error, stdout, stderr) => {
    if (error) {
      console.log("ERROR IN ADB 2");
      console.error("Error executing ADB command 3:", error);
      res.status(500).json({ error: "Error executing ADB command 4" });
      return;
    }
    console.log("ADB command output:", stdout);
    res.json({ output: stdout });
  });
});

app.post("/run-command", (req, res) => {
  console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
  // console.log("ZYZYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY : ", req.body);
  const { tool, apkInfo } = req.body;
  // console.log("apkinfo:", apkInfo);
  let toolPath = "";
  let command = "";
  let filePath = "";
  if (tool === "Androwarn") {
    toolPath = "/home/lavkush/Desktop/thesis/androwarn/androwarn.py";
    command = `python3 ${toolPath} -i "${apkInfo.path.replace(
      /\\/g,
      "\\\\"
    )}" -r txt -v 1`;
  } else if (tool === "Androbugs") {
    toolPath = "/home/lavkush/Desktop/thesis/androbugs2/androbugs.py";
    command = `python3 "${toolPath}" -f "${apkInfo.filePath.replace(
      /\\/g,
      "\\\\"
    )}"`;
  } else if (tool === "qark") {
    renameToApk(apkInfo.filePath);
    toolPath = "/home/lavkush/Desktop/qark/qark/qark.py";
    command = `qark --apk "${apkInfo.filePath}.apk" --report-type json`;
    console.log(command);
  } else if (tool === "APKLeaks") {
    toolPath = "/home/lavkush/tools/apkleaks/apkleaks.py";
    command = `python3 ${toolPath} -f "${apkInfo.filePath.replace(
      /\\/g,
      "\\\\"
    )}" -o results.txt`;
  } else {
    return res.status(400).json({ error: "Invalid tool" });
  }
  // console.log("Tool : ", tool);
  // console.log("Tool Path:", toolPath);
  // console.log("Command:", command);

  exec(command, { stdio: "pipe" }, (error, stdout, stderr) => {
    let str = "Backend";
    if (tool == "APKLeaks") {
      filePath = getFilePathForAPKLeaks(toolPath, stdout, tool, apkInfo);
    } else {
      if (tool == "qark") {
        str = "Finish writing report to";
      }
      // console.log("ssssss : ", stdout);
      let ind = stdout.indexOf(str) + str.length + 1;
      let fileName = stdout.slice(ind);
      // console.log(`File name : ->${fileName}<-`);
      if (tool == "Androwarn") {
        var commaInd = fileName.indexOf("'");
      } else if (tool == "Androbugs") {
        var commaInd = fileName.indexOf(" >>>");
      } else if (tool == "qark") {
        var commaInd = fileName.indexOf(".json") + 5;
      }
      fileName = fileName.slice(0, commaInd);
      // console.log("filename length : ", fileName.length);
      // console.log("' index : ", commaInd);
      console.log("file name : ", fileName);
      filePath = path.join(__dirname, fileName);
      console.log("file path : ", filePath);
      if (tool == "qark") filePath = fileName;

      let sourcePath = path.resolve(__dirname, "..");
      sourcePath = path.join(sourcePath, fileName);
      // filePath = filePath + "/reports";
      const destinationPath =
        path.resolve(__dirname, "..") + "/src/reports/" + fileName;
      console.log("SSSSSSSSSSSSSSSSSS : ", sourcePath);
      console.log("DDDDDDDDDDDDDDDDDD : ", destinationPath);
      fs.rename(sourcePath, destinationPath, (err) => {
        if (err) {
          console.error(`Error moving the file: ${err}`);
        } else {
          console.log("File moved successfully");
        }
      });
      filePath = destinationPath;
    }

    // console.log("xxxxxxxxxxxxxxxxxxxxxx : ", stdout);
    // console.log("yyyyyyyyyyyyyyyyyyyyyy : ", filename);
    // console.log("zzzzzzzzzzzzzzzzzzzzzz : ", fileName);

    console.log("OOOOOOOOOOOOOOOOOOOOOO : ", filePath);
    if (fs.existsSync(filePath)) {
      console.log("in if block");
      res.setHeader("Content-Type", "text/plain");
      res.setHeader(
        "Content-Disposition",
        'attachment; filename="downloaded_file.txt"'
      );
      const fileStream = fs.createReadStream(filePath);
      fileStream.pipe(res);
    } else {
      console.log("in else block");
      res.status(404).json({ error: "File not found" });
    }
  });
});

app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});
